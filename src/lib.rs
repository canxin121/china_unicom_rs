use std::cell::LazyCell;

use chrono::TimeDelta;
use reqwest::Client;

pub mod data;
pub mod query;

pub const CLIENT: LazyCell<Client> = LazyCell::new(|| Client::new());

// 定义一个全局的格式化字符串
const DEFAULT_FORMAT: &str = "时间: [时间]
流量:
    * 总量:
        - 总流量: [流量总量]
        - 定向流量: [流量定向总量]
        - 通用流量: [流量通用总量]
    * 用量:
        - 总流量: [流量总用量]
        - 定向流量: [流量定向用量]
        - 通用流量: [流量通用用量]
        - 免费流量: [流量免费用量]
        - 收费流量: [流量收费用量]
    * 余量:
        - 总流量: [流量总余量]
        - 定向流量: [流量定向余量]
        - 通用流量: [流量通用余量]
通话:
    * 总量:
        - 总通话时长: [通话总量]
        - 定向通话时长: [通话定向总量]
        - 通用通话时长: [通话通用总量]
    * 用量:
        - 总通话时长: [通话总用量]
        - 定向通话时长: [通话定向用量]
        - 通用通话时长: [通话通用用量]
    * 余量:
        - 总通话时长: [通话总余量]
        - 定向通话时长: [通话定向余量]
        - 通用通话时长: [通话通用余量]";

// 定义一个全局纯区间信息的格式化字符串
const DEFAULT_FORMAT_WITH_LAST: &str = "区间信息:
    * 时长: [区间时长]
    * 流量:
        - 总流量: [区间流量总用量]
        - 免费流量: [区间流量免费用量]
        - 收费流量: [区间流量收费用量]
        - 通用流量: [区间流量通用用量]
        - 定向流量: [区间流量定向用量]
    * 通话:
        - 总通话时长: [区间通话总用量]
        - 定向通话时长: [区间通话定向用量]
        - 通用通话时长: [区间通话通用用量]
查询信息:
    时间: [时间]
    流量:
        * 总量:
            - 总流量: [流量总量]
            - 定向流量: [流量定向总量]
            - 通用流量: [流量通用总量]
        * 用量:
            - 总流量: [流量总用量]
            - 定向流量: [流量定向用量]
            - 通用流量: [流量通用用量]
            - 免费流量: [流量免费用量]
            - 收费流量: [流量收费用量]
        * 余量:
            - 总流量: [流量总余量]
            - 定向流量: [流量定向余量]
            - 通用流量: [流量通用余量]
    通话:
        * 总量:
            - 总通话时长: [通话总量]
            - 定向通话时长: [通话定向总量]
            - 通用通话时长: [通话通用总量]
        * 用量:
            - 总通话时长: [通话总用量]
            - 定向通话时长: [通话定向用量]
            - 通用通话时长: [通话通用用量]
        * 余量:
            - 总通话时长: [通话总余量]
            - 定向通话时长: [通话定向余量]
            - 通用通话时长: [通话通用余量]";

// 定义一个全局的日期时间格式化字符串
const DATETIME_FORMAT: &str = "%Y-%m-%d %H:%M:%S";

pub fn format_duration(duration: TimeDelta) -> String {
    if duration.num_days() > 0 {
        format!(
            "{}天{}小时{}分钟",
            duration.num_days(),
            duration.num_hours() % 24,
            duration.num_minutes() % 60
        )
    } else if duration.num_hours() > 0 {
        format!(
            "{}小时{}分钟",
            duration.num_hours(),
            duration.num_minutes() % 60
        )
    } else {
        format!("{}分钟", duration.num_minutes())
    }
}
